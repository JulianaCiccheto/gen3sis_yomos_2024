---
title: "Workshop gen3sis"
subtitle:  "Building and running custom mechanistic eco-evolutionary biodiversity models"
authors:
  - name: Oskar Hagen (oskar@hagen.bio)
  - name: Juliana Ciccheto
format: html
toc: true
toc-depth: 2
editor: visual
execute: 
  echo: TRUE
  warning: false
---

![16.05.2024, Federseestation in Bad Buchau, Germany](https://static.wixstatic.com/media/c2b417_0e2b0aceec0f49dfb07ae5b40a912e56~mv2.png/v1/crop/x_0,y_0,w_1100,h_431,q_90,enc_auto/YoMos-Logo-Querformat_websitebackgorund_.png "Yomos")

## Preamble

This workshop aims to: disseminate knowledge on utilizing gen3sis for various research inquiries, and provide practical experience in the mechanistic modeling cycle. The course will briefly introduce the philosophical context of natural science and the principles of mechanistic models. Participants will engage in hands-on exercises, applying gen3sis to explore hypotheses concerning the genesis and maintenance of biodiversity within the R programming environment, with opportunities to design their own research questions. The workshop primarily employs simulated data, culminating in insights on connecting processes and patterns within biodiversity research. To prepare, bring a laptop with R and the latest version of gen3sis. If you want to come even more prepared and make the most of the course, I recommend reading the [methods paper](https://doi.org/10.1371/journal.pbio.3001340) and having a look at this [repo](https://github.com/ohagen/DispDiv3), containing some of the materials (i.e. landscapes and configuration files) used here.

## Introduction

Welcome to this workshop on `gen3sis`, an R package designed for simulating ecological e evolutionary dynamics over time and space. In this two-hour workshop, we will:

1.  Set up the R environment.\
2.  Understand the basics of `gen3sis`.
3.  Run a basic simulation.
4.  Customize simulations.
5.  Troubleshoot.

## 1. Setting up the R environment

We'll need the `gen3sis` R-package along with configuration and landscapes from this [repo](https://github.com/ohagen/DispDiv3). Please download the repo and create a new R script in the same directory. There you can copy and paste the code from the sections bellow.

```{r}
# install and load gen3sis
require(gen3sis)
# get package version
print(paste("gen3sis version:", packageVersion("gen3sis")))
# we will also use terra for landscape visualization
require(terra)
# package here for simple directory configuration
require(here)
# package ape for phylogenetic analysis
require(ape)
```

Download landscape and configuration files

```{r}
# get home dir
here::i_am("gen3sis_workshop.qmd")
# set path to directory containing the landscape
landscape_dir <- here("space")
# look at folder structure
list.files(landscape_dir)
# set path to config_file
config_file <- here("config/config_simple.R")
```

## 2. Understanding the basics of `gen3sis`.

Gen3sis is an engine that simulates eco-evolutionary processes at the population level. It utilizes a landscape containing environmental variables that evolve over time, alongside a configuration file housing the eco-evolutionary rules.

### 2.1 Landscape

![This tutorial utilizes a theoretical archipelago system. Each site 1x1 km, features temperature (i.e. mean, minimum and maximum temperature) and has a landscape structure that is generated by approximating topography, uplift dynamics, and lapse rate. Additionally, it incorporates global temperature and sea level changes dating back to the past 5 million years (Ma).](https://github.com/ohagen/DispDiv3/raw/main/figures/AnimationS1_patch_dynamics.gif)

```{r}
# load landscapes
lc <- readRDS(file.path(landscape_dir,"landscapes.rds"))
# class(lc) "list"
# get names of landscape variables
names(lc)
# get first time step
first_step_pos <- ncol(lc$mean_temp)
first_step <- colnames(lc$mean_temp)[first_step_pos]
# get first 10 sites of mean temperature for the 2 last time steps and the first (oldest) time step
lc$mean_temp[100:110, c(1:4, first_step_pos)]
# plot mean_temp for first and last time step
par(mfrow=c(1,2))
plot(r_first <- rast(lc$mean_temp[ ,c("x", "y", first_step)], type="xyz"), main="first")
plot(r_last <- rast(lc$mean_temp[ ,c("x", "y", "0")], type="xyz"), main="last")
par(mfrow=c(1,1)) # set it back
```

<div style="background-color: lightgreen; padding: 1px;">

üèãüíª **Exercise** [max 10 min] 
Create a way to visualize the last 100 time steps of this gen3sis input. If possible think of abstracting for any x,y,z1,z2,z3... temporal data-frame. If possible, try to make a function.

<details>

```{r, eval=FALSE}
# solution 1
for (ti in 100:0) {
  ri <- rast(lc$elevation[,c("x", "y", as.character(ti))], type="xyz")
  plot(ri, main=paste(ti/100, "Ma")) # divide by 100 to get Ma since 1 time-step =10 kyr
  Sys.sleep(0.1)
}
# solution 2
# define animation function
plot_landenv <-  function(df, times=100:0, reverse=F, speed=0.1){
  # df is a data frame with x, y coordinates and time steps as columns with environmental variables
  # reverse is a boolean. Reverse the order of time steps?
  # times is either a vector of time steps or a character "all"
  # speed in seconds
  #df <- lc$temp
  if (times[1]=="all"){
   times <- names(df)[!names(df)%in%c("x", "y")] 
  }
  if (reverse){
    times <- rev(times)
  }
  for (ti in times){
    ri <- rast(df[,c("x", "y", ti)], type="xyz")
    plot(ri, main=paste(as.numeric(ti)/100, "Ma"))
    Sys.sleep(speed)
  }
}
# call animation function
plot_landenv(lc$elevation, times=c(100:0), speed=0.1)
# example of plotting entire time series
# plot_landenv(lc$min_temp, times="all", reverse=T, speed=0.03)

```
</details>
</div>

### 2.2 Config

Open this config file in Rstudio or any text editor to see the rules that will be applied to the landscape.

```{r}  
# load config
cf <- create_input_config(config_file = here("config/config_simple.R"))
# list all main elements of the config file
names(cf$gen3sis)
# list all elements of the general section, i.e. the main settings and not so much on the eco-evolutionary processes
names(cf$gen3sis$general)
```

<div style="background-color: lightgreen; padding: 1px;">
üèãüíª **Exercise** [max 10 min] 
Open the config file config_simple and go though the eco-evolutionary rules that will be applied to the landscape.
<details>
<strong>Settings</strong>

We start our simulation at the latest avaiable time, i.e. 5Ma, which corresponds to time step 500 since 1 time-step = 10 kyr. We end it a the latest available time-step. Sometimes, simulations can go forever, to avoid this we limit the maximum total number of species alive in a simulation to 50000 with max_number_of_species and the maximum number of species within one site to 20000 with max_number_of_coexisting_species. This stops and flags simulations that generate too many species (time constrain). We define which traits we will consider in our simulation with traits_names, in our example, species have a dispersal ability a optimum temperature and a temperature width trait.

<strong>Observer</strong>

The observer function saves and plot changes (real-time during model execution) over time in the conditions of the virtual world (biotic and abiotic) by saving custom information at designated time steps.

<strong>Initialization</strong>

The create_ancestor_species function creates the first specie(s) in the simulation. In this case, we create one species spread across all avaiable sites with low dispersal ability, optimum temperature at 20 degrees C and a temperature width (+-1).


<strong> Dispersal </strong>

The dispersal function iterates over all species populations and determines the connectivity between sites, crucial for trait evolution and specialization, as well as the colonization of new sites. In our example, species dispersal is stochastic and uniform across all species. I.e. an exponential distribution with the rate denominator as the dispersal trait value.

<strong> Speciation </strong>

The speciation iterates over every species separately, registers populations‚Äô geographic occupancy (species range), and determines when geographic isolation between population clusters is higher than a user-defined threshold, triggering a lineage splitting event of cladogenesis. The clustering of occupied sites is based on the species‚Äô dispersal capacity and the landscape connection costs. Over time, disconnected clusters gradually accumulate incompatibility, analogous to genetic differentiation. When the divergence between clusters is above the speciation threshold, those clusters become two or more distinct species, and a divergence matrix reset follows. On the other hand, if geographic clusters come into secondary contact before the speciation occurs, they coalesce and incompatibilities are gradually reduced to zero.


<strong>Evolution</strong>

Think of it as trait evolution. Clustered populations (exchanging genes) have their trait homogenized. If weighted by abundance a trait of a population that is doing well in a site, as dictated by the ecology function, will contribute more to the average trait of a cluster. Populations mutate based on a normal distribution with standard deviation 0.001, possibly increasing or decreasing species optimum temperature.

<strong> Ecology </strong>

The ecology function determines the abundance or presence of the populations in occupied sites of each species. The function iterates over all occupied sites and updates the species population abundances or presences on the basis of local environmental values, updated co-occurrence patterns and species traits. In this example we use only presence/absence data, i.e. abundances 0 or 1.


</details>

</div>


<div style="background-color: lightgreen; padding: 1px;">
üèãüíª **Exercise** [max 2 min] 
Think of 3 ways to change extinction rates?
</div>

## 3. Run a basic simulation.

It's time to run a simulation, we use the config_simple and archipelago system we are familiar with and set verbose to 2 in order to get more information on the progress of the simulation.

```{r, eval=FALSE}
# run simulation
sim <- run_simulation(config = here("config/config_simple.R"), 
                      landscape = here("space"), 
                      output_directory = here("output"))
```

On sim we store the simulation output summary, while most of the information and large data is/should be stored in the output directory. If you don't want to run the simulation, you can load the sim object from the repo.

```{r}
sim <- readRDS(here("output/config_simple/sgen3sis.rds"))
```


In addition to the simulation output summary, we include a flag indicating whether the simulation completed successfully or the criteria for stopping, such as an excessive number of species. This section also provides system information and simulation-specific parameters.

```{r}
#check elements inside the sim object
names(sim)

# visualize the outputs
plot_summary(sim)
```

Beyond the custom storage mediated over the observer function, we have a standard phylogeny stored as phy.nex as well as a copy ot the config used for the simulation.

```{r}
phy <- readnexus(file.path(here("output/config_simple/phy.nex")))
```

## 4. Customize simulations.

## 5. Troubleshoot.
